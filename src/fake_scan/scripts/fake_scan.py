#!/usr/bin/env python
#coding=utf-8

import rospy
from sensor_msgs.msg import LaserScan
from std_msgs.msg import Header
import random
from math import pi

sample = [1.753000020980835, 1.7510000467300415, 1.7549999952316284, 1.75, 1.7619999647140503, 1.7649999856948853, 1.7630000114440918, 1.774999976158142, 1.7740000486373901, 1.781000018119812, 1.7879999876022339, 1.7869999408721924, 1.7990000247955322, 1.8079999685287476, 1.8140000104904175, 1.8209999799728394, 1.8229999542236328, 1.8509999513626099, 1.8559999465942383, 1.8680000305175781, 1.875, 1.8980000019073486, 1.9079999923706055, 1.9149999618530273, 1.937000036239624, 1.944000005722046, 1.9639999866485596, 1.968999981880188, 1.9780000448226929, 1.819000005722046, 1.8250000476837158, 1.8389999866485596, 1.5540000200271606, float('inf'), float('inf'), 0.3199999928474426, 0.3149999976158142, 0.30799999833106995, 0.30300000309944153, 0.3019999861717224, 0.3009999990463257, 0.3019999861717224, 0.3019999861717224, 0.30300000309944153, 0.3070000112056732, 0.31200000643730164, 0.31700000166893005, 0.3240000009536743, 0.34700000286102295, 0.3610000014305115, 0.36399999260902405, 0.3799999952316284, 0.3799999952316284, 0.39899998903274536, 0.414000004529953, 0.41999998688697815, 0.421999990940094, 0.41999998688697815, 0.4189999997615814, 0.4300000071525574, 0.4320000112056732, 0.4320000112056732, 0.4350000023841858, 0.44600000977516174, 0.47099998593330383, 0.5289999842643738, 0.531000018119812, 0.5479999780654907, 0.5690000057220459, 0.609000027179718, 0.6209999918937683, 0.6330000162124634, float('inf'), float('inf'), 6.432000160217285, 6.6529998779296875, 6.568999767303467, 6.484000205993652, 6.565000057220459, 6.388999938964844, 6.432000160217285, 6.504000186920166, 6.408999919891357, 6.369999885559082, 6.427999973297119, 6.443999767303467, 6.3460001945495605, 6.447999954223633, 6.495999813079834, 6.330999851226807, 6.308000087738037, 6.5279998779296875, 6.366000175476074, 6.415999889373779, 6.47599983215332, 6.4679999351501465, 6.354000091552734, 6.3429999351501465, 6.460000038146973, 6.480000019073486, 6.388999938964844, float('inf'), float('inf'), float('inf'), float('inf'), 6.5, 6.408999919891357, 5.795000076293945, 5.795000076293945, float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), 4.25600004196167, 1.559999942779541, 1.534000039100647, 1.475000023841858, 1.4190000295639038, 1.3980000019073486, 1.3760000467300415, float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), float('inf'), 0.8799999952316284, 0.8610000014305115, 0.843999981880188, 0.8399999737739563, 0.8360000252723694, 0.8199999928474426, 0.8180000185966492, 0.8169999718666077, 0.8180000185966492, 0.8109999895095825, 0.8069999814033508, 0.8009999990463257, 0.7979999780654907, 0.7889999747276306, 0.7889999747276306, 0.7829999923706055, 0.781000018119812, float('inf'), 0.32199999690055847, 0.3160000145435333, 0.31299999356269836, 0.3109999895095825, 0.3089999854564667, 0.3089999854564667, 0.3089999854564667, 0.3070000112056732, 0.30799999833106995, 0.3059999942779541, 0.3059999942779541, 0.3059999942779541, 0.3059999942779541, 0.3059999942779541, 0.3050000071525574, 0.3059999942779541, 0.3059999942779541, 0.3059999942779541, 0.3059999942779541, float('inf'), 0.30799999833106995, 0.30799999833106995, 0.31299999356269836, float('inf'), float('inf'), float('inf'), 0.7680000066757202, 0.7770000100135803, 0.7789999842643738, 0.7839999794960022, 0.7860000133514404, 0.7940000295639038, 0.796999990940094, 0.8059999942779541, 0.8059999942779541, float('inf'), 0.8240000009536743, 0.828000009059906, 0.8320000171661377, 0.8389999866485596, 0.8460000157356262, 0.8529999852180481, 0.8659999966621399, 0.8669999837875366, 0.8840000033378601, 0.890999972820282, 0.9020000100135803, 0.9070000052452087, 0.9210000038146973, 0.9300000071525574, 0.9419999718666077, 0.9480000138282776, 0.9549999833106995, 0.9810000061988831, 0.9919999837875366, float('inf'), 1.034999966621399, 1.0570000410079956, 1.0679999589920044, 1.097000002861023, 1.1119999885559082, 1.128000020980835, 1.1649999618530273, 1.1829999685287476, 1.218000054359436, 1.2430000305175781, 1.2680000066757202, 1.3020000457763672, 1.3270000219345093, 1.343999981880188, 1.3849999904632568, 1.3550000190734863, 1.347000002861023, 1.3250000476837158, 1.305999994277954, 1.3009999990463257, 1.2929999828338623, 1.2680000066757202, 1.2619999647140503, 1.2450000047683716, 1.2769999504089355, 1.3179999589920044, 1.3289999961853027, 1.3179999589920044, 1.3070000410079956, 1.2960000038146973, 1.2940000295639038, 1.2899999618530273, float('inf'), 2.6519999504089355, 2.6440000534057617, 2.618000030517578, 2.615999937057495, 2.61899995803833, 2.6070001125335693, 2.5869998931884766, 2.5959999561309814, 2.5959999561309814, 2.5820000171661377, 2.5799999237060547, 2.5880000591278076, 2.5799999237060547, float('inf'), 2.572000026702881, 2.568000078201294, 2.563999891281128, 2.5789999961853027, 2.5799999237060547, 2.5850000381469727, 2.5920000076293945, 2.6050000190734863, float('inf'), 1.2419999837875366, 1.2089999914169312, 1.2120000123977661, 1.218000054359436, 1.2239999771118164, 1.2300000190734863, 1.2300000190734863, 2.7320001125335693, 2.752000093460083, 2.7820000648498535, 2.7869999408721924, 2.7929999828338623, 2.8269999027252197, 2.864000082015991, 2.878999948501587, float('inf'), 2.4769999980926514, 2.4149999618530273, 2.3320000171661377, 2.2760000228881836, 2.190999984741211, 2.1480000019073486, 2.072000026702881, 2.0299999713897705, 1.9479999542236328, 1.9040000438690186, 1.8569999933242798, 1.4800000190734863, 1.4980000257492065, 1.5230000019073486, 1.524999976158142, 1.5609999895095825, 1.5399999618530273, 1.531000018119812, 1.562000036239624, 1.600000023841858, 1.6410000324249268, 1.659999966621399, 1.7050000429153442, 1.7209999561309814, 1.7710000276565552, 1.7990000247955322, 1.8559999465942383, 1.8799999952316284, 1.940000057220459, 1.9809999465942383, 2.0139999389648438, 2.0850000381469727, 2.121999979019165, 2.2039999961853027, 2.253999948501587, 2.308000087738037, 2.38100004196167, 2.433000087738037, 2.569000005722046, 2.635999917984009, 2.7679998874664307, 2.8440001010894775, 3.0239999294281006, 3.111999988555908, 3.2960000038146973, 3.306999921798706, 3.265000104904175, 3.2860000133514404, 3.242000102996826, 3.2260000705718994, 3.2160000801086426, 3.2100000381469727, 3.174999952316284, 3.180999994277954, 3.1449999809265137, 3.1459999084472656, 3.132999897003174, 3.134999990463257, 3.125, 3.122999906539917, 3.11899995803833, float('inf'), 1.7510000467300415, 1.753000020980835, 1.746999979019165]

scan_topic = 'scan'
scan_frame = 'laser'

sd = LaserScan()
sd.angle_min = -3.12413907051
sd.angle_max = 3.14159274101
sd.angle_increment = 0.0174532923847
sd.range_min = 0.15
sd.range_max = 12.0
sd.ranges = sample
sd.intensities = [47.0]*360

def get_ros_time():
    now = rospy.Time.now()
    return now

def publish_scan():
    header = Header()
    header.frame_id = scan_frame
    header.stamp = get_ros_time()
    sd.header = header
    scan_pub.publish(sd)

if __name__ == '__main__':
    rospy.init_node('fake_laser_scan', anonymous=True)
    rate = rospy.Rate(10)

    scan_pub = rospy.Publisher(scan_topic, LaserScan, queue_size=5)

    while not rospy.is_shutdown():
        publish_scan()
        rate.sleep()